package server;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.Map;

/*
 * This class acts as a Facade, it setups the communication between ports and services.
 */
public final class Communication {
	/*
	 * @param portNumber: It's the port we set to listen for incoming connections.
	 * 
	 * @param Map<Integer,String> exploit: It's the map that will contain our ports
	 * mapped with its relative service.
	 * 
	 * @throws IOException: We want to be sure that who is using the server is aware
	 * of its restrictions: The path in which the server will look for is:
	 * Tesi/TextFiles/PortsStrings/serviceStrings/filteredFiles/ If the server is
	 * not launched from its directory then there might be troubles to track the
	 * files containing the payloads. So to avoid this we restrict the user to a
	 * fixed path with an IOException.
	 * 
	 * This method will setup a socket server to listen for incoming connections on
	 * specific ports. The ports we listen to are those described in
	 * the @link{fillMap} method from class @link{MapFiller}. The server can listen
	 * to up to 1 port at time. If the port given as input cannot be served, then
	 * the executable will exit with an error. NOTE: Users can define a different
	 * setup for ports to listen to by overriding the @link{fillMap} method.
	 *
	 * If the execution starts from the correct directory and the port we want to
	 * listen to is supported - that is it's in the Map - then we access the file
	 * matched with the port number and return a random line from the file.
	 * 
	 * For example if we want to listen to port 22, then the ssh.txt file will be
	 * used, and a random line from that file will be returned to the client
	 * interacting with the server on the specific port.
	 * 
	 */
	public void interact(Map<Integer, String> exploit) throws IOException {

		MapFiller setup = new MapFiller();
		setup.fillMap(exploit);
		PayloadGenerator generator = new PayloadGenerator();
		
		Selector selector = Selector.open();
		try {
		for (int port : exploit.keySet()) {
			ServerSocketChannel serverChannel = ServerSocketChannel.open();
			serverChannel.configureBlocking(false);
			serverChannel.socket().bind(new InetSocketAddress(port));
			serverChannel.register(selector, SelectionKey.OP_ACCEPT);
		}

		while (selector.isOpen()) {
			selector.selectNow(); // or selectNow();
			Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();
			while (iterator.hasNext()) {

				SelectionKey selectedKey = iterator.next();

				if (selectedKey.isAcceptable()) {
					SocketChannel clientSocketChannel = ((ServerSocketChannel) selectedKey.channel()).accept();
					// clientSocketChannel.configureBlocking(false);
					Socket clientSocket = clientSocketChannel.socket();
					System.out.println("Local Port:" + clientSocket.getLocalPort());
					PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);

					out.println(generator.getRandomPayloadFromFile(
							new RandomAccessFile(new File("TextFiles//PortsStrings//serviceStrings//"
									+ "filteredFiles//" + exploit.get(clientSocket.getLocalPort()) + ".txt"), "r")));
				}
			}
			selector.selectedKeys().clear();
		}
	} catch (IOException e) {
		System.out.println("Error during");
	}
	} 
}