package server;

import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

import org.cornutum.regexpgen.RandomGen;
import org.cornutum.regexpgen.RegExpGen;
import org.cornutum.regexpgen.js.Provider;
import org.cornutum.regexpgen.random.RandomBoundsGen;

import injector.ExploitBuilder;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

/**
 * 
 * @author Alessandro Bonfiglio.
 * 
 *         This class hosts the main method and therefore how the server, which
 *         is listening on certain ports for an incoming connection, will
 *         interact with its client. The response given by the the server is
 *         defined in the {@link respond} method.
 * 
 *         The Server class makes use of different objects: -
 *         {@link ExploitBuilder} injector: which injects the response string
 *         with a payload. - {@link ResponseGenerator} responder: which
 *         generates a response to return. The server also makes use of: -
 *         Selector selector: to make ports interact with the client. - String
 *         payload: string to inject in the response.
 * 
 * @param args: no parameters are allowed.
 * 
 * 
 *              * @throws IOException: The server has restrictions. The path in
 *              which the server will look for files is:
 *              Tesi/TextFiles/InjectableProbes/toInject/. If the server is not
 *              launched from its directory then there will be troubles tracking
 *              the files containing the payloads in the file system. So to
 *              avoid this the user is restricted to a fixed path with an
 *              IOException.
 * 
 *              This method will setup a Selector, which will be used to select
 *              the appropriate output to return to the client, and a
 *              SocketServerChannel to listen for incoming connections on all
 *              ports contained in the map at the same time. The ports listen to
 *              are those described in the {@link fillMap} method from class
 *              {@link Database}. The iteration goes through the keys of the
 *              selector: each time a connection is made on port x, the server
 *              will reply with an answer suitable for port x.
 *
 *              If the executable is launched from the correct directory and the
 *              port it wants to listen to is supported - that is it's in the
 *              Map and there are its database files - then the program will
 *              run: A string is extracted from the proper database file, it
 *              then gets matched with a string generated by a RegulaxExpression
 *              parser and the obtained new string is returned as output to the
 *              client.
 * 
 *              Example: if a client opens a connection on port 22, then the
 *              ssh.txt file will be used, and a random line from that file is
 *              extracted, injected and parsed so that the result matches the
 *              extracted string and returned to the client.
 */
public class Server {
	private static String payloadPath;
	public static void main(String[] args) throws IOException {
		switch (args.length) {
		case 0:
			payloadPath = "Payloads//example_payloads.txt";
			break;
		case 1:
			payloadPath = args[0];
			break;
		default:
			System.err.println(
					"Cannot locate " + args[0] + ". Usage : ./Injector_server.jar inputFile.\nMake sure the file is in the same"
							+ " directory as the jar file.\nExample: ./Injector_server.jar Payloads//example_payloads.txt.");
			System.exit(1);
		}

		Map<Integer, String> map = new TreeMap<Integer, String>();
		Database database = new Database(map);
		ExploitBuilder injector = new ExploitBuilder();
		ResponseGenerator responder = new ResponseGenerator();
		RandomGen random = new RandomBoundsGen();
		Selector selector = Selector.open();

		database.fillMap();
	

		try {
			for (int port : map.keySet()) {
				ServerSocketChannel serverChannel = ServerSocketChannel.open();
				serverChannel.configureBlocking(false);
				serverChannel.socket().bind(new InetSocketAddress(port));
				serverChannel.register(selector, SelectionKey.OP_ACCEPT);
			}

			System.out.println("Server listening on ports: " + map.keySet());

			while (selector.isOpen()) {
				selector.select();
				Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();
				while (iterator.hasNext()) {
					SelectionKey selectedKey = iterator.next();

					if (selectedKey.isAcceptable()) {
						SocketChannel clientSocketChannel = ((ServerSocketChannel) selectedKey.channel()).accept();
						Socket clientSocket = clientSocketChannel.socket();

						String filePath = "TextFiles//injectableProbes//toInject//"
								+ map.get(clientSocket.getLocalPort()) + ".txt";
						BufferedReader fileToRead = new BufferedReader(new FileReader(filePath));

						BufferedReader payloadToRead = new BufferedReader(new FileReader(payloadPath));
						String payload = database.getRandomLineFromFile(payloadToRead, payloadPath);

						PrintWriter output = new PrintWriter(clientSocket.getOutputStream(), true);
						System.out.println("Client opened connection on local port:" + clientSocket.getLocalPort());
						String injected = responder.generateResponse(database, injector, payload, filePath, fileToRead, random);

						output.println(injected);
						System.out.println(injected);
					}
				}
				selector.selectedKeys().clear();
			}
		} catch (IOException e) {
			System.out.println(
					"An error occurred when retrieving datas from database. Make sure server is launched in Tesi "
							+ "directory or the input file exists.");
		}
	}
}