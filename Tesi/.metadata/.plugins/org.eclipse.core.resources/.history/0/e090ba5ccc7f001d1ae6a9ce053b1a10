package injector;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *  * 
 *         This class implements the injection phase. Here they are prepared
 *         strings that will be returned by the server. If the string has a
 *         capture group that matches the payload, then it gets injected with the
 *         payload. If it doesn't match then it is parsed by the parser.
 *
 */
public class ExploitBuilder {

	/**
	 * 		   This method handles the injection phase. Here a string gets
	 * 		   its capture groups injected by a payload if the payload
	 * 		   fits the regular expressions contained in the capture groups.
	 * 		   If the string did get inject and contains a payload, 
	 * 		   then it is returned injected, otherwise it is returned empty.
	 * 
	 * @param injectable - the string we want to inject.
	 * @param payload -    the payload we want to inject into the string.
	 * 
	 * @return injectable - the injected string.
	 * 
	 *         
	 */

	public String inject(String injectable, String payload) {
		String backup = injectable; 
		String captureGroup;
		String captureGroup2;

		do {
			captureGroup = backup.substring(backup.indexOf("("), backup.indexOf(")") + 1); //extract first captureGroup
			long numOfCaptureGroups = captureGroup.chars().filter(ch -> ch == '(').count(); // count for nested groups																						
			if (numOfCaptureGroups > 1) { // if there's more than one in the same group
				int n = backup.lastIndexOf(captureGroup); // calculate where captureGroup starts
				captureGroup2 = backup.substring(n + captureGroup.length(), // capture the other one
						(backup.indexOf((")"), n + captureGroup.length()) + 1));
				captureGroup = captureGroup + captureGroup2; // make one capture group
				backup = backup.replace(captureGroup, ""); // delete it from backup
				captureGroup=""; //update deletion
			}

			if (payload.matches(captureGroup)) { // if we do have a match with the payload
				injectable = injectable.replace(captureGroup, payload); // we use the payload
				backup = backup.replace(captureGroup, ""); // we do use the payload in the backup too
			} else {
				backup = backup.replace(captureGroup, ("")); // otherwise just delete it
			}

		} while (backup.contains("("));

		if (!injectable.contains(payload)) {
			injectable = "";
		}
		return injectable;
	}
	
	/**
	 * @param toRestict: string to restrict.
	 * @return regexWithoutBars: regular expression in between | |.
	 * 
	 *  It compiles a pattern so that it can getthe regular expression in between its starting symbols "m|^" 
	 *  and ending symbol "|".
	 *  It then substring it to delete the string delimiters and the starting symbol mentioned earlier, and it returns
	 *  the result.
	 *  
	 */
	public String restrict(String toRestict) {
		Pattern p = Pattern.compile("m\\|[\\W](.*?)\\|"); //restrict the string in between | |
		Matcher m = p.matcher(toRestict);
		m.find();
		String regexWithBars = m.group();
		String regexWithoutBars = regexWithBars.substring(3, regexWithBars.length() - 1);
		return regexWithoutBars;
	}
}