package server;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

//import com.github.curiousoddman.rgxgen.RgxGen;
import org.cornutum.regexpgen.RandomGen;
import org.cornutum.regexpgen.RegExpGen;
import org.cornutum.regexpgen.js.Provider;
import org.cornutum.regexpgen.random.RandomBoundsGen;

import injector.ExploitBuilder;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;


/**
 * 
 * @author Alessandro Bonfiglio
 * 
 * This class holds the main method and therefore how the server, which is listening on certain ports for an 
 * incoming connection, will interact with its client.
 * The response given by the the server is defined in the {@link respond} method. 
 * 
 * The Server class makes use of different objects:
 * - {@link ExploitBuilder} injector: which injects the response string with a payload.
 * - {@link ResponseGenerator} responder: which generates a response to return.
 *	The server also makes use of:
 * - Selector selector: to make ports interact with the client.
 * - String payload: to inject in the response.
 * 
 * @param args: no parameters allowed.
 * 
 * If the input argument is not 0 then the program will exit with an error.
 * 
 * * @throws IOException: We want to be sure that who is using the server is aware
	 *                      of its restrictions: the path in which the server will
	 *                      look for files is:
	 *                      Tesi/TextFiles/PortsStrings/serviceStrings/filteredFiles/.
	 *                      If the server is not launched from its directory then
	 *                      there might be troubles to track the files containing
	 *                      the payloads in the file system. 
	 *                      So to avoid this we restrict the user to a fixed path with an IOException.
	 * 
	 *                      This method will setup a Selector, which we will use to
	 *                      select the appropriate output to return to the client,
	 *                      and a SocketServerChannel to listen for incoming
	 *                      connections on all ports contained in the map at the
	 *                      same time. The ports we listen to are those described in
	 *                      the {@link fillMap} method from class {@link Database}.
	 *                      We iterate through the keys of the selector: each time a
	 *                      connection is made on port x, the server will reply with
	 *                      an answer suitable for port x. If the port given as
	 *                      input cannot be served, then the executable will exit
	 *                      with an error. 
	 *
	 *                      If the executable is launched from the correct directory and
	 *                      the port we want to listen to is supported - that is
	 *                      it's in the Map and we have its database files - then
	 *                      the program will run:
	 *                      A string is extracted from the correct database file, 
	 *                      it then gets matched with a generated string by a RegulaxExpression parser
	 *                      and the obtained new string is returned as output to the client.
	 * 
	 *                      Example: if a client opens a connection on port 22, then
	 *                      the ssh.txt file will be used, and a random line from
	 *                      that file is extracted, parsed so that the result matches 
	 *                      the extracted string and returned to the client.
 */
public class Server {
    public static void main(String[] args) throws IOException {
        if (args.length!=0){
        	System.err.print("Cannot run this program with parameters.");
        	System.exit(1);
        }
        
        Map<Integer,String> map = new TreeMap<Integer,String>();       
        Database database = new Database(map);
        ExploitBuilder injector = new ExploitBuilder();
		ResponseGenerator responder = new ResponseGenerator();
		Selector selector = Selector.open();
		
		//String payload = "OR 1=1";
		
		database.fillMap();
		//String payload = "\"’/><img src=’x’ onerror=’alert\\(1\\)’/>";
		
		try {
			for (int port : map.keySet()) {
				ServerSocketChannel serverChannel = ServerSocketChannel.open();
				serverChannel.configureBlocking(false);
				serverChannel.socket().bind(new InetSocketAddress(port));
				serverChannel.register(selector, SelectionKey.OP_ACCEPT);
			}
			
			System.out.println("Server listening on ports: " + map.keySet());
			
			while (selector.isOpen()) {
				selector.select();
				Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();
				while (iterator.hasNext()) {
					SelectionKey selectedKey = iterator.next();

					if (selectedKey.isAcceptable()) {
						SocketChannel clientSocketChannel = ((ServerSocketChannel) selectedKey.channel()).accept();
						Socket clientSocket = clientSocketChannel.socket();

						String filePath = "//home//kali//Desktop//Tesi//TextFiles//injectableProbes//toInject//"
								+ map.get(clientSocket.getLocalPort()) + ".txt";
						BufferedReader fileToRead = new BufferedReader(new FileReader(filePath));
						String payloadPath = "Payloads//example_payloads.txt";
						BufferedReader payloadToRead = new BufferedReader(new FileReader(payloadPath));
						String extractedPayload = database.getRandomLineFromFile(payloadToRead, payloadPath);
						String payload = extractedPayload.replace("(", "\\(").replace(")", "\\)");
						
						PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
						System.out.println("Client opened connection on local port:" + clientSocket.getLocalPort());			
						String injected = responder.generateResponse(database, injector, payload, filePath,
								fileToRead);
						
						//RgxGen regexGenerator = new RgxGen(injected);
						//String response = regexGenerator.generate();	
						RandomGen random = new RandomBoundsGen();
						RegExpGen generator = Provider.forEcmaScript().matchingExact(injected);
						String generated =  generator.generate( random);
											
						
						out.println(generated);
						System.out.println(generated);
						//byte[] nbytes = injectedAndMatched.getBytes();
						//clientSocket.getOutputStream().write(injectedAndMatched.getBytes());
		
					}
				}
				selector.selectedKeys().clear();
			}
		} catch (IOException e) {
			System.out.println(
					"An error occurred when retrieving datas from database. Make sure server is launched in Tesi "
							+ "directory.");
		}
	}  
}